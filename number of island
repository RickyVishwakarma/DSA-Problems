void bfs(int row, int col, vector<vector<int>> &vis, vector<vector<char>> &grid) {
        vis[row][col] = 1;
        queue<pair<int, int>> q;
        q.push({row, col});
        int n = grid.size();
        int m = grid[0].size();

        while (!q.empty()) {
            int row = q.front().first;
            int col = q.front().second;
            q.pop();

            // Traverse the neighbors and mark them
            for (int deltaRow = -1; deltaRow <= 1; deltaRow++) {
                for (int deltaCol = -1; deltaCol <= 1; deltaCol++) {
                    int nRow = row + deltaRow;
                    int nCol = col + deltaCol;

                    if ((nRow >= 0 && nRow < n) && (nCol >= 0 && nCol < m) &&
                        grid[nRow][nCol] == '1' && !vis[nRow][nCol]) {

                        vis[nRow][nCol] = 1;
                        q.push({nRow, nCol});
                    }
                }
            }
            // Remove the recursive call
            // bfs(row, col, vis, grid);
        }
    }

    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> vis(n, vector<int>(m, 0));

        int cnt = 0;
        for (int row = 0; row < n; row++) {
            for (int col = 0; col < m; col++) {
                if (!vis[row][col] && grid[row][col] == '1') {
                    cnt++;
                    bfs(row, col, vis, grid);
                }
            }
        }
        return cnt;
    }
