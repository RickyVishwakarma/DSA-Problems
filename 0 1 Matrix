class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        int m = mat.size();
        int n = mat[0].size();

        vector<vector<int>> dist(m, vector<int>(n, -1));
        queue<pair<int, int>> q;

        // Initialize the queue with cells having value 0 and mark them as visited.
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 0) {
                    q.push({i, j});
                    dist[i][j] = 0;
                }
            }
        }

        int delRow[] = {-1, 0, 1, 0};
        int delCol[] = {0, 1, 0, -1};

        // Perform BFS to find the distance to the nearest 0.
        while (!q.empty()) {
            int row = q.front().first;
            int col = q.front().second;  
            q.pop();

            for (int i = 0; i < 4; i++) {
                int nRow = row + delRow[i];
                int nCol = col + delCol[i];

                if (nRow >= 0 && nRow < m && nCol >= 0 && nCol < n && dist[nRow][nCol] == -1) {
                    dist[nRow][nCol] = dist[row][col] + 1;
                    q.push({nRow, nCol});
                }
            }
        }

        return dist;
    }
};
