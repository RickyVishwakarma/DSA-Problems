#include <iostream>
#include <vector>
#include <string>
#include <algorithm> // For std::sort
using namespace std;

class Solution {
private:
    bool isSafe(int x, int y, int n, vector<vector<int>> &visited, vector<vector<int>> &m) {
        if (x >= 0 && x < n && y >= 0 && y < n && visited[x][y] == 0 && m[x][y] == 1) {
            return true;
        } else {
            return false;
        }
    }

    void solve(vector<vector<int>> &m, int n, vector<string> &ans, int x, int y, vector<vector<int>> &visited, string path) {
        // You have reached x and y here
        if (x == n - 1 && y == n - 1) {
            ans.push_back(path);
            return;
        }
        visited[x][y] = 1;

        // 4 choices: D, L, U, R
        int newx, newy;

        // DOWN
        newx = x + 1;
        newy = y;
        if (isSafe(newx, newy, n, visited, m)) {
            path.push_back('D');
            solve(m, n, ans, newx, newy, visited, path);
            path.pop_back();
        }

        // LEFT
        newx = x;
        newy = y - 1;
        if (isSafe(newx, newy, n, visited, m)) {
            path.push_back('L');
            solve(m, n, ans, newx, newy, visited, path);
            path.pop_back();
        }

        // RIGHT
        newx = x;
        newy = y + 1;
        if (isSafe(newx, newy, n, visited, m)) {
            path.push_back('R');
            solve(m, n, ans, newx, newy, visited, path);
            path.pop_back();
        }

        // UP
        newx = x - 1;
        newy = y;
        if (isSafe(newx, newy, n, visited, m)) {
            path.push_back('U');
            solve(m, n, ans, newx, newy, visited, path);
            path.pop_back();
        }

        visited[x][y] = 0;
    }

public:
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<string> ans;

        if (m[0][0] == 0) {
            return ans;
        }

        int srcx = 0;
        int srcy = 0;

        vector<vector<int>> visited(n, vector<int>(n, 0));
        string path = "";
        solve(m, n, ans, srcx, srcy, visited, path);

        sort(ans.begin(), ans.end());
        return ans;
    }
};

int main() {
    int n;
    cout << "Enter the size of the grid (n): ";
    cin >> n;

    vector<vector<int>> grid(n, vector<int>(n));
    cout << "Enter the grid (0 for obstacles, 1 for open cells):\n";
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> grid[i][j];
        }
    }

    Solution solver;
    vector<string> result = solver.findPath(grid, n);

    if (result.empty()) {
        cout << "No path found." << endl;
    } else {
        cout << "Paths found:\n";
        for (string path : result) {
            cout << path << endl;
        }
    }

    return 0;
}
