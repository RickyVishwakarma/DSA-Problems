class Solution{
public:
    Node *getMiddle(Node *head) {
        Node *slow = head;
        Node *fast = head->next;

        while (fast != NULL && fast->next != NULL) {
            fast = fast->next->next;
            slow = slow->next;
        }
        return slow;
    }

    Node *reverse(Node *head) {
        Node *curr = head;
        Node *prev = NULL;
        Node *next = NULL;

        while (curr != NULL) {
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }

    // Function to check whether the list is palindrome.
    bool isPalindrome(Node *head) {

        if (head == NULL || head->next == NULL) {
            return true;
        }

        Node *middle = getMiddle(head);
        Node *temp = middle->next;

        middle->next = reverse(temp);

        // Comparing the linked list;
        Node *head1 = head;
        Node *head2 = middle->next;

        while (head2 != NULL) {
            if (head1->data != head2->data) {
                // Restore the original list by reversing the second half back to its original order
                temp = middle->next;
                middle->next = reverse(temp);
                return false;
            }
            head1 = head1->next;
            head2 = head2->next;
        }

        // Restore the original list by reversing the second half back to its original order
        temp = middle->next;
        middle->next = reverse(temp);

        return true;
    }
};
