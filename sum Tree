class Solution
{
    public:
    pair<bool, int> isSumTreeFast(Node* root){
        //base case
        if(root == NULL){
            pair <bool, int> p = make_pair(true, 0);
            return p;
        }
        
        //for habdling the leaves nodes;
        if(root->left == NULL && root->right == NULL){
            pair<bool, int>p = make_pair(true, root->data);
            return p;
        }
        
        // check ans in left
        pair<bool, int> leftAns = isSumTreeFast(root->left);
        // check ans in right
        pair<bool, int> rightAns = isSumTreeFast(root->right);
        
        bool left = leftAns.first;
        bool right = rightAns.first;
        bool condition = root-> data == leftAns.second + rightAns.second;
        
        pair<bool, int>ans;
        if(left && right && condition){
            ans.first = true;
            ans.second = 2 * root -> data;
        }else{
            ans.first = false;
        }
        
        return ans;
    }
    bool isSumTree(Node* root)
    {
         return isSumTreeFast(root).first;
    }
};
