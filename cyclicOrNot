#include<unordered_map>
#include<queue>
#include<list>

bool isCyclicBFS(int src, unordered_map<int, bool>& visited, unordered_map<int, list<int>>& adj, unordered_map<int, int>& parent) {
    queue<int> q;
    visited[src] = true;
    q.push(src);

    while (!q.empty()) {
        int front = q.front();
        q.pop();

        for (auto neighbour : adj[front]) {
            if (!visited[neighbour]) {
                visited[neighbour] = true;
                q.push(neighbour);
                parent[neighbour] = front;
            } else if (neighbour != parent[front]) {
                return true; // Found a cycle
            }
        }
    }
    return false;
}

string cycleDetection(vector<vector<int>>& edges, int n, int m) {
    unordered_map<int, list<int>> adj;
    for (int i = 0; i < m; i++) {
        int u = edges[i][0];
        int v = edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    unordered_map<int, bool> visited;
    unordered_map<int, int> parent;

    for (int i = 0; i < n; i++) {
        if (!visited[i]) {
            bool ans = isCyclicBFS(i, visited, adj, parent);
            if (ans) {
                return "YES";
            }
        }
    }
    return "NO";
}
