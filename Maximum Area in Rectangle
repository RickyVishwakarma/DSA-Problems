class Solution
{
private:
    vector<int> nextSmallerElement(int *arr, int n)
    {
        stack<int> s;
        s.push(-1);

        vector<int> ans(n);

        for (int i = n - 1; i >= 0; --i)
        {
            int curr = arr[i];

            while (s.top() != -1 && arr[s.top()] >= curr)
            {
                s.pop();
            }

            ans[i] = s.top();
            s.push(i);
        }
        return ans;
    }

    vector<int> prevSmallerElement(int *arr, int n)
    {
        stack<int> s;
        s.push(-1);

        vector<int> ans(n);

        for (int i = 0; i < n; i++)
        {
            int curr = arr[i];

            while (s.top() != -1 && arr[s.top()] >= curr)
            {
                s.pop();
            }

            ans[i] = s.top();
            s.push(i);
        }
        return ans;
    }
    int largestRectangleArea(int *heights, int n)
    {
        // int n = heights.size();

        vector<int> prev = prevSmallerElement(heights, n);
        vector<int> next = nextSmallerElement(heights, n);

        int area = INT_MIN;

        for (int i = 0; i < n; i++)
        {
            int l = heights[i];
            if (next[i] == -1)
            {
                next[i] = n;
            }
            int b = next[i] - prev[i] - 1;
            int newArea = l * b;
            area = max(area, newArea);
        }
        return area;
    }

    int maximalRectangleArea(int M[MAX][MAX], int n, int m, int row, int col)
    {
        if (row >= n || col >= m)
        {
            return 0;
        }

        if (M[row][col] == 0)
        {
            return 0;
        }

        int rightArea = maximalRectangleArea(M, n, m, row, col + 1);

        int downArea = maximalRectangleArea(M, n, m, row + 1, col);

        return max(M[row][col] * (downArea + 1), max(rightArea, downArea));
    }

public:
    // int maxArea(int M[MAX][MAX], int n, int m)
    // {
    //     // COMPUTE THE AREA OF FIRST ROW
    //     int area = largestRectangleArea(M[0], m);

    //     for(int i = 1 ; i < n ; i++){
    //         for(int j = 0; j < m ; j++){
    //             // UPADTE THE : BY ADDING THE VALUES OF THE PREVIOUS ROW

    //             if(M[i][j] != 0){
    //                 M[i][j] = M[i][j] + M[i - 1][j];
    //             }
    //             else{
    //                 M[i][j] = 0;
    //             }
    //         }
    //         int newArea = largestRectangleArea(M[i], m);

    //         area = max(area, newArea);
    //     }
    //     return area;

    // }

    int maxArea(int M[MAX][MAX], int n, int m)
    {
        int maxArea = 0;
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                int area = maximalRectangleArea(M, n, m, i, j);
                maxArea = max(maxArea, area);
            }
        }
        return maxArea;
    }
};
